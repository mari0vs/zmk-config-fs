// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_comma: tap_dance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_comma";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_dot";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        td_grave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_grave";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        td_minus: tap_dance_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_minus";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        td_equal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_equal";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        td_bslh: tap_dance_bslh {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bslh";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSLH>, <&kp PIPE>;
        };

        td_brc: tap_dance_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_brc";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bkt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_par";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td_rsbl: tap_dance_rsbl {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_rebl";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&reset>, <&bootloader>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <1 2 3>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        combo_del {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18 19>;
            bindings = <&kp ESC>;
        };

        combo_enter {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18>;
            bindings = <&kp RET>;
        };

        combo_shift {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <5 22>;
            bindings = <&sk LSHFT>;
        };

        combo_win {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <6 23>;
            bindings = <&sk LGUI>;
        };

        combo_alt {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <7 24>;
            bindings = <&sk LALT>;
        };

        combo_ctrl {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <8 25>;
            bindings = <&sk LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <

            &kp P       &kp Y       &kp F       &kp G       &kp FSLH            &kp SQT     &kp H       &kp J       &kp K       &kp L

            &kp A       &kp O       &kp I       &kp E       &kp U               &kp R       &kp T       &kp N       &kp D       &kp S

            &kp Z       &kp X       &kp C       &kp V       &td_comma           &td_dot     &kp B       &kp M       &kp W       &kp Q

                                            &to 1   &kp ENTER     &kp SPACE  &to 2
            >;
        };

        right_layer {
            bindings = <

            &kp INS    &kp N1     &kp N2     &kp N3     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp COLON

            &kp DEL    &kp N4     &kp N5     &kp N6     &trans         &kp LARW   &kp DARW   &kp UARW   &kp RARW   &kp SEMI

           &caps_word  &kp N7     &kp N8     &kp N9     &kp N0         &trans     &trans     &trans     &trans     &trans

                                             &trans     &kp ESC        &trans     &to 3
            >;
        };

        left_layer {
            bindings = <

            &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE

            &trans     &trans     &trans     &trans     &trans         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans

                                             &to 3     &trans         &trans     &trans

            >;
        };

        tri_layer {
            bindings = <

            &reset     &trans     &trans     &trans    &bt BT_SEL 0    &trans     &trans     &trans     &trans      &reset

          &bootloader  &trans     &trans     &trans    &bt BT_SEL 1    &trans     &trans     &trans     &trans    &bootloader

            &trans     &trans     &trans    &bt BT_CLR &bt BT_SEL 2    &trans     &trans     &trans     &trans     &trans

                                             &trans     &trans         &trans     &trans

            >;
        };
    };
};
