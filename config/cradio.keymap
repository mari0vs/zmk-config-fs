// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
//        ht: hold_tap {
//            label = "hold_tap";
//            compatible = "zmk,behavior-hold-tap";
//            #binding-cells = <2>;
//            flavor = "tap-preferred";
//            tapping-term-ms = <220>;
//            quick-tap-ms = <150>;
//            global-quick-tap;
//            bindings = <&kp>, <&kp>;
//        };

        td_comma: tap_dance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_comma";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_dot";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        td_grave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_grave";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        td_minus: tap_dance_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_minus";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        td_equal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_equal";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        td_bslh: tap_dance_bslh {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bslh";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSLH>, <&kp PIPE>;
        };

        td_brc: tap_dance_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_brc";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bkt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_par";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td_rsbl: tap_dance_rsbl {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_rebl";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&reset>, <&bootloader>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <1 2 3>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        combo_del {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18 19>;
            bindings = <&kp ESC>;
        };

        combo_enter {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18>;
            bindings = <&kp RET>;
        };

        combo_shift {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <5 22>;
            bindings = <&sk LSHFT>;
        };

        combo_win {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <6 23>;
            bindings = <&sk LGUI>;
        };

        combo_alt {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <7 24>;
            bindings = <&sk LALT>;
        };

        combo_ctrl {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <8 25>;
            bindings = <&sk LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <

            &kp P       &kp Y       &kp F       &kp G       &kp FSLH            &kp SQT     &kp H       &kp J       &kp K       &kp L

            &kp A       &kp O       &kp I       &kp E       &kp U               &kp R       &kp T       &kp N       &kp D       &kp S

            &kp Z       &kp X       &kp C       &kp V       &td_comma           &td_dot     &kp B       &kp M       &kp W       &kp Q

                                                &to 1       &kp BSPC            &kp SPACE   &to 2
            >;
        };

        NAV_layer {
            bindings = <

            &none       &none       &none       &none       &none               &kp CAPS    &kp HOME    &kp PG_DN   &kp PG_UP   &kp END

            &kp LSHFT   &kp LGUI    &kp LALT    &kp LCTRL   &kp RALT            &kp INS     &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT

            &kp BSPC    &none       &none       &none       &none               &none       &none       &none       &none       &none

                                                &trans      &to 0               &trans      &to 3

            >;
        };

        NYM_layer {
            bindings = <

            &none       &td_grave   &td_minus   &td_equal   &none               &none       &kp N1      &kp N2      &kp N3      &none

            &td_bslh    &td_brc     &td_bkt     &td_par     &none               &none       &kp N4      &kp N5      &kp N6      &none

            &kp BSPC    &none       &none       &none       &none               &none       &kp N7      &kp N8      &kp N9      &kp SPACE

                                                &to 3       &to 0               &kp N0      &trans

            >;
        };

        FN_layer {
            bindings = <

            &td_rsbl    &kp F1      &kp F1      &kp F3      &kp F4            &bt BT_CLR &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &td_rsbl

            &kp PSCRN   &kp F5      &kp F6      &kp F7      &kp F8            &kp C_VOL_UP  &kp LCTRL   &kp LALT    &kp LGUI    &kp LSHFT

         &out OUT_TOG   &kp F9      &kp F10     &kp F11     &kp F12           &kp C_VOL_DN  &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp C_MUTE

                                                &trans      &to 0               &none       &trans

            >;
        };
    };
};
